#!/usr/bin/env ruby

require 'pomodoro'
require 'refined-refinements/colours'

using RR::ColourExts

def parse(parser_class, transformer_class, result_class, file_path)
  input = File.read(file_path, encoding: 'utf-8')
  tree  = parser_class.new.parse(input)
  # .parse(input, reporter: Parslet::ErrorReporter::Deepest.new)
  nodes = transformer_class.new.apply(tree)
  result_class.new(nodes) unless nodes.empty?
rescue Errno::ENOENT
  abort "<red>File #{file_path} doesn't exist.</red>".colourise
end

def parse_today_list(config)
  parse(Pomodoro::TodayParser, Pomodoro::TodayTransformer, Pomodoro::TaskList, config.today_path)
end

def parse_task_list(config)
  parse(Pomodoro::TaskListParser, Pomodoro::SimpleFormat::TaskListTransformer, Pomodoro::SimpleFormat::TaskList, config.task_list_path)
end

def time_frame(config, &block)
  today_list = parse_today_list(config)

  unless current_time_frame = today_list.get_current_time_frame
    abort "<red>There is no active time frame.</red>".colourise
  end

  block.call(today_list, current_time_frame)
end

# TODO: change this to find the first active task, ignoring the time frame.
# Only then complain about the time frame.
def with_active_task(config, &block)
  time_frame(config) do |today_list, current_time_frame|
    if active_task = current_time_frame.active_task
      block.call(active_task)
      today_list.save(config.today_path)
    else
      abort "<red>No more tasks in #{current_time_frame.desc}</red>".colourise
    end
  end
end

def generate_todays_tasks(date, config)
  require 'pomodoro/scheduler'

  date_path = config.today_path(date)

  return date_path if File.exist?(config.today_path)

  scheduler = Pomodoro::Scheduler.load([config.schedule_path, config.routine_path], date)

  schedule = scheduler.schedule_for_date(date)
  task_list = schedule.call
  scheduler.populate_from_rules(task_list)

  main_task_list = parse_task_list(config)
  labels = ['Tomorrow', date.strftime('%A'), date.strftime('%-d/%m'), date.strftime('%-d/%m/%Y')]

  labels.each do |label|
    if main_task_list[label]
      main_task_list[label].tasks.each do |task|
        puts "~ #{task}"
        task_list.morning_ritual.create_task(task)
        main_task_list.delete(main_task_list[label])
      end
    end
  end

  File.open(date_path, 'w') do |file|
    file.puts(task_list.to_s)
  end

  main_task_list.save(config.task_list_path)

  return date_path
end

# Main.
config = Pomodoro::Config.new

case ARGV.shift
when 'edit', 'e'
  if ARGV.empty?
    date_path = generate_todays_tasks(Date.today, config)
    exec("vim #{date_path}")
  elsif ARGV.first.to_i == 2
    date_path = generate_todays_tasks(Date.today, config)
    exec("vim -O2 #{date_path} #{config.task_list_path}")
  elsif ARGV.first == 'tomorrow'
    date_path = generate_todays_tasks(Date.today + 1, config)
    exec("vim -O2 #{date_path} #{config.task_list_path}")
  elsif ['tasks', 't'].include?(ARGV.first)
    exec("vim #{config.task_list_path}")
  else
    abort(DATA.read.colourise)
  end
when 'next'
  time_frame(config) do |today_list, current_time_frame|
    if active_task = current_time_frame.active_task
      abort "<red>There is an active task already:</red>\n#{active_task}".colourise
    end

    if task = current_time_frame.first_unstarted_task
      task.start
      today_list.save(config.today_path)
    else
      abort "<red>No more tasks in #{current_time_frame.desc}</red>".colourise
    end
  end
when 'next?'
  time_frame(config) do |today_list, current_time_frame|
    if active_task = current_time_frame.active_task
      abort "<red>There is an active task already:</red>\n#{active_task}".colourise
    end

    if task = current_time_frame.first_unstarted_task
      puts task
    else
      abort "<red>No more tasks in #{current_time_frame.desc}</red>".colourise
    end
  end
when 'complete'
  with_active_task(config) do |active_task|
    require 'pry'; binding.pry ###
    active_task.complete
    puts active_task
  end
when 'postpone'
  # Ask for metadata and comments.
  with_active_task(config) do |active_task|
    active_task.postpone
    puts active_task
  end
when 'move_on'
  # Ask for metadata and comments.
  with_active_task(config) do |active_task|
    active_task.move_on
    puts active_task
  end
when 'active'
  with_active_task(config) do |active_task|
    if ARGV.first == 'git' # git-commit-pomodoro
      puts active_task.text # TODO: subtasks as well.
    else
      puts active_task
    end
  end
when '+'
  task_list = parse_task_list(config)
  task_list['Later'] ||= Array.new
  task_list['Later'] << ARGV.join(' ')
  task_list.save(config.task_list_path)
when 'console', 'c'
  today = parse_today_list(config)
  tasks = parse_task_list(config)
  require 'pry'; binding.pry
when 'bitbar'
  require 'pomodoro/commands/bitbar'
  today_list = parse_today_list(config)
  task_list  = parse_task_list(config)
  Pomodoro::Commands::BitBar.main(today_list, task_list)
when 'help', '-h', '--help'
  puts(DATA.read.colourise)
else
  abort(DATA.read.colourise)
end

__END__

<red.bold>:: Pomodoro ::</red.bold>

pomodoro <green>edit</green>, pomodoro <green>e</green>
  <bright_black>pomodoro e</bright_black> Edit the today task file, creating it if it doesn't exist.
  <bright_black>pomodoro e <yellow>2</yellow></bright_black> Edit both the today task file and tasks (in a split screen).
  <bright_black>pomodoro e <yellow>tasks</yellow></bright_black> (or just <yellow>t</yellow>) Open the task file.
  <bright_black>pomodoro e <yellow>tomorrow</yellow></bright_black> Plan tomorrow.

pomodoro <magenta>next</magenta> <bright_black># Start a new task.</bright_black>
pomodoro <magenta>complete</magenta> <bright_black># Complete the active task.</bright_black>
pomodoro <magenta>postpone</magenta> <bright_black># Postpone the active task.</bright_black>
pomodoro <magenta>move_on</magenta> <bright_black># Move on from the active task. Mark its end time, but don't set it as completed.</bright_black>

pomodoro <green>next?</green> <bright_black># Print the next task.</bright_black>
pomodoro <green>active</green> <bright_black># Print the active task.</bright_black>

pomodoro <red>+</red> [strings]<bright_black> # Add a task for later.</bright_black>

pomodoro <yellow>console</yellow>, pomodoro <yellow>c</yellow> <bright_black># Load the tasks and launch IRB.</bright_black>
pomodoro <yellow>bitbar</yellow> <bright_black># Print output for BitBar.</bright_black>
