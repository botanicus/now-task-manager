#!/usr/bin/env ruby

# Today:
# - [20] Meditation. #meditation
#   {started: '9:20', 'finished': '10:20', pomodoros: 4, waiting_for: 'Email from ...'}
# - [20] Dancing.
# - [15] TopTal. #online #work
# - Some cleanup.
# - [90] Write a blog post. #online
# - Plan tomorrow.

require 'pomodoro'
require 'pomodoro/exts/hour'
# require 'refined-refinements/colours' # Not needed for bitbar for instance.

TASK_LIST_PATH = File.expand_path('~/Dropbox/WIP/tasks.todo')
manager = Pomodoro::TaskManager.parse(TASK_LIST_PATH)

case ARGV.shift
when 'postpone', 'skip', 'discard'
  abort 'Currently found unnecessary. Pomodoro is trying to be simple and against skipping.'
when 'next'
  abort "No more tasks." if manager.today_tasks.empty?
  task = manager.active_task

  if task.command
    puts task.text
    puts %x{#{task.command}} # TODO: Time.timer -> update log-time.
  else
    arguments = "#{task.text} #{task.tags.map { |tag| "##{tag}" }.join(' ')} #{task.duration}"
    command = "log-time #{arguments.split(' ').map { |word| "'#{word}'" }.join(' ')}"
    puts command; system command
  end

  manager.mark_active_task_as_done
  manager.save
when 'next?'
  abort "No more tasks." if manager.today_tasks.empty?
  task = manager.active_task
  puts "#{task.text} #{task.tags.map { |tag| "##{tag}" }.join(' ')} #{task.duration}"
when 'today'
  unfinished_tasks = manager.today_tasks.select { |task| ! task.tags.include?(:done) }
  unless unfinished_tasks.empty?
    puts unfinished_tasks
    puts; puts "Time to done: #{Hour.new(0, unfinished_tasks.sum(&:duration))}."
  else
    puts "All done!"
  end
when 'punch-off'
  require 'date' # TODO: use the lib.

  date = ARGV.include?('--yesterday') ? Date.today.prev_day : Date.today
  path = File.expand_path("~/Dropbox/WIP/Tasks/#{date.strftime('%Y-%m-%d')}.todo")

  abort "File #{path} already exists!" if File.exists?(path)

  finished_tasks = manager.finished_tasks.map do |task|
    tags = task.tags - [:done]
    Pomodoro::Task.new(task.text, task.duration, tags)
  end

  unless ARGV.include?('--dry-run')
    lines = File.readlines(File.expand_path('~/Dropbox/WIP/Pomodoro.log'))
    log_items = lines.grep(/^#{date.strftime('%d/%m/%Y')} /)
    File.open(path, 'w') do |file|
      file.puts("\n\n")
      file.puts(finished_tasks)
      file.puts("\n")
      file.puts(log_items)
    end
    # puts "Well done! Today you have done:\n\n"
    # puts(finished_tasks)
    system("vim #{path}")
  else
    puts "#{path}:"
    puts(finished_tasks)
  end

  manager.switch_days(date.next_day, File.expand_path('~/.config/pomodoro/schedules/base.rb'))
  if ARGV.include?('--dry-run')
    puts "\n\nTomorrow:"
    puts manager.today_tasks
  else
    manager.save
    system "vim #{TASK_LIST_PATH}"
  end
  manager = Pomodoro::TaskManager.parse(TASK_LIST_PATH)
  puts; puts "Total time: #{Hour.new(0, manager.today_tasks.sum(&:duration))}."
when 'review-and-plan'
  today = Date.today

  # TODO: Quarters currently unsupported. Don't be lazy, do it manually!
  interval = if today == Date.parse('1/1') then :year
          elsif today == Date.parse("1/#{today.month}") then :month
          elsif today.sunday? then :week
          else raise("Unknown interval")
  end

  today_date_string = Date.today.strftime('%Y-%m-%d')

  review_path = File.expand_path("~/Dropbox/WIP/Tasks/#{today_date_string}.#{interval}.review")
  plan_path   = File.expand_path("~/Dropbox/WIP/Tasks/#{today_date_string}.#{interval}.plan")

  File.open(review_path, 'w') do |file|
    file.puts <<-EOF
# How did the week go?
# Observations? Diet, drinking, state of mind ...
    EOF
  end

  File.open(plan_path, 'w') do |file|
    file.puts <<-EOF
# Important, urgent, long-term.
    EOF
  end

  system("vim '#{review_path}'")
  system("vim '#{plan_path}'")
when 'add', '+'
  if File.exists?('tasks.todo') && ARGV[0].downcase.match("#{File.basename(Dir.pwd)}:")
    # TODO: Fails for .bitbar.
    puts "~ Appending locally."
    manager = Pomodoro::TaskManager.parse('tasks.todo')
    tasks = manager.instance_variable_get(:@tasks)
    tasks[:tasks] ||= []
    tasks[:tasks].push(Pomodoro::Task.new(ARGV.join(' ')))
    manager.save
  else
    manager.add_task_for_later(ARGV.join(' '))
    manager.save
  end
when 'edit'
  editor = ARGV.shift || ENV['EDITOR']
  exec "#{editor} #{TASK_LIST_PATH}"
when 'show-projects'
  schedule = Pomodoro::Scheduler.load(File.expand_path('~/.config/pomodoro/schedules/base.rb'))
  puts schedule.projects
  puts "\n#{schedule.projects.length} in total, repeats every #{((schedule.projects.length * 7) / 30.0).round(2)} months."
when 'show-schedule'
  require 'date'

  if date_string = ARGV.shift
    date = Date.parse(date_string)
  else
    date = Date.today
  end

  schedule = Pomodoro::Scheduler.load(File.expand_path('~/.config/pomodoro/schedules/base.rb'), date)

  puts "#{date.strftime('%A %d/%m/%Y')}:"
  schedule = schedule.for_today(true)
  puts; puts schedule
when '-h', '--help'
  using RR::ColourExts
  puts(DATA.read.colourise)
else
  using RR::ColourExts
  abort(DATA.read.colourise)
end

__END__

<red.bold>:: Pomodoro ::</red.bold>

<bright_black>pomodoro</bright_black> <magenta>next</magenta>
  Start a new pomodoro from tasks.todo.

<bright_black>pomodoro</bright_black> <red>next?</red>
  Displays the next pomodoro.

<bright_black>pomodoro</bright_black> <green>today</green>
  Shows today's tasks.

<bright_black>pomodoro</bright_black> <blue.bold>punch-off</blue.bold>
  Punch off for the day.

<bright_black>pomodoro</bright_black> <blue.bold>punch-off</blue.bold> --yesterday
  Punch off for yesterday.

<bright_black>pomodoro</bright_black> <blue.bold>punch-off</blue.bold> --dry-run

<bright_black>pomodoro</bright_black> <cyan>review-and-plan</cyan>
  Create and open review and plan files for editing.

  Based on current date, it will be either:
    <blue>Weekly</blue> review & plan if it's Sunday.
    <blue>Monthly</blue> review & plan if it's the first day of a month.
    <blue>Yearly</blue> review & plan if it's the 1st of January.

  Note that as of now there is no support for quaterly reviews,
  but you can just add them manually.

<bright_black>pomodoro</bright_black> <yellow>add</yellow>
<bright_black>pomodoro</bright_black> <yellow>+</yellow>
  Add a task for later.

  Note that this is by design. You should not be adding tasks for today during the day.
  Plan in the evening and then stick to it.

<bright_black>pomodoro</bright_black> <cyan>edit</cyan>
  Edit tasks.todo using <bright_black>$EDITOR</bright_black>.

<bright_black>pomodoro</bright_black> <green.bold>show-projects</green.bold>
  Show active projects.

<bright_black>pomodoro</bright_black> <yellow.bold>show-schedule</yellow.bold>
<bright_black>pomodoro</bright_black> <yellow.bold>show-schedule 24/12/2018</yellow.bold>
