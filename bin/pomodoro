#!/usr/bin/env ruby

# Today:
# - [20] Meditation. #meditation
#   {started: '9:20', 'finished': '10:20', pomodoros: 4, waiting_for: 'Email from ...'}
# - [20] Dancing.
# - [15] TopTal. #online #work
# - Some cleanup.
# - [90] Write a blog post. #online
# - Plan tomorrow.

require 'pomodoro'
require 'pomodoro/exts/hour'

TASK_LIST_PATH = File.expand_path('~/Dropbox/WIP/tasks.todo')
manager = Pomodoro::TaskManager.parse(TASK_LIST_PATH)

case ARGV.shift
when 'postpone', 'skip', 'discard'
  abort 'Currently found unnecessary. Pomodoro is trying to be simple and against skipping.'
when 'next'
  abort "No more tasks." if manager.today_tasks.empty?
  task = manager.active_task
  arguments = "#{task.text} #{task.tags.map { |tag| "##{tag}" }.join(' ')} #{task.duration}"
  command = "log-time #{arguments.split(' ').map { |word| "'#{word}'" }.join(' ')}"
  puts command; system command

  manager.mark_active_task_as_done
  manager.save
when 'today'
  unfinished_tasks = manager.today_tasks.select { |task| ! task.tags.include?(:done) }
  unless unfinished_tasks.empty?
    puts unfinished_tasks
    puts; puts "Time to done: #{Hour.new(0, unfinished_tasks.sum(&:duration))}."
  else
    puts "All done!"
  end
when 'punch-off'
  path = File.expand_path("~/Dropbox/WIP/Tasks/#{Time.now.strftime('%Y-%m-%d')}.todo")
  abort "File #{path} already exists!" if File.exists?(path)
  unless ARGV.include?('--dry-run')
    File.open(path, 'w') do |file|
      file.puts(manager.finished_tasks.map do |task|
        tags = task.tags - [:done]
        Pomodoro::Task.new(task.text, task.duration, tags)
      end)
    end
  else
    puts "#{path}:"
    puts(manager.finished_tasks.map do |task|
      tags = task.tags - [:done]
      Pomodoro::Task.new(task.text, task.duration, tags)
    end)
  end

  manager.switch_days(File.expand_path('~/.config/pomodoro/schedules/base.rb'))
  if ARGV.include?('--dry-run')
    puts "\n\nTomorrow:"
    puts manager.today_tasks
  else
    manager.save
    system "vim #{TASK_LIST_PATH}"
  end
  manager = Pomodoro::TaskManager.parse(TASK_LIST_PATH)
  puts; puts "Total time: #{Hour.new(0, manager.today_tasks.sum(&:duration}."
when 'add', '+'
  manager.add_task_for_later(ARGV.join(' '))
  manager.save
when 'show-projects'
  schedule = Pomodoro::Scheduler.load(File.expand_path('~/.config/pomodoro/schedules/base.rb'))
  puts schedule.projects
  puts "\n#{schedule.projects.length} in total, repeats every #{((schedule.projects.length * 7) / 30.0).round(2)} months."
when 'show-schedule'
  require 'date'

  if date_string = ARGV.shift
    date = Date.parse(date_string)
  else
    date = Date.today
  end

  schedule = Pomodoro::Scheduler.load(File.expand_path('~/.config/pomodoro/schedules/base.rb'), date)

  puts "#{date.strftime('%A %d/%m/%Y')}:"
  schedule = schedule.for_today(true)
  puts; puts schedule
else
  abort "Usage: #{$0} [next|today|punch-off|add|show-projects|show-schedule]."
end
